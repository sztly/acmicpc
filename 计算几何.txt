//#pragma comment(linker, "/STACK:102400000,102400000")
#define _CRT_SECURE_NO_WARNINGS
#include<cstdio>
#include<algorithm>
#include<cstdlib>
#include<vector>
#include<cmath>
#include<cstring>
#include<string>
#include<map>
#include<set>
#include<stack>
#include<ctime>
#include<queue>
#include<utility>
#include<ctime>
#include<iostream>
#include<assert.h>
using namespace std;

#define ls v << 1
#define rs v << 1 | 1

typedef long long LL;
typedef unsigned int UI;
typedef pair<int, int> PII;

const double eps = 1e-8;
const double pi = acos(-1.0);

int dbcmp(double x){
	if (x > eps) return 1;
	if (x < -eps) return -1;
	return 0;
}

struct Point {
	double x, y;
	Point(){}
	Point(double a, double b) :x(a), y(b){}
	void input(){
		scanf("%lf%lf", &x, &y);
	}
	friend bool operator < (const Point &a, const Point &b){
		return dbcmp(a.x - b.x) < 0 || (dbcmp(a.x - b.x) == 0 && dbcmp(a.y - b.y) < 0);
	}
	friend Point operator + (const Point &a, const Point &b){
		return Point(a.x + b.x, a.y + b.y);
	}
	friend Point operator - (const Point &a, const Point &b){
		return Point(a.x - b.x, a.y - b.y);
	}
	friend bool operator == (const Point &a, const Point &b){
		return dbcmp(a.x - b.x) == 0 && dbcmp(a.y - b.y) == 0;
	}
	friend Point operator * (const Point &a, const double &b){
		return Point(a.x*b, a.y*b);
	}
	friend Point operator * (const double &a, const Point &b){
		return Point(a*b.x, a*b.y);
	}
	friend Point operator /(const Point &a, const double &b){
		return Point(a.x / b, a.y / b);
	}
	double getLength(){
		return sqrt(x*x + y*y);
	}
};

double det(const Point &a, const Point &b){
	return a.x*b.y - a.y*b.x;
}

double dot(const Point &a, const Point &b){
	return a.x*b.x + a.y*b.y;
}

double dist(const Point &a, const Point &b){
	return (a - b).getLength();
}

//点或者向量的旋转
Point rotate_point(const Point &a, double A){
	double tx = a.x, ty = a.y;
	return Point(tx*cos(A) - ty*sin(A), tx*sin(A) + ty*cos(A));
}

//p位点集，ch为凸包上的点集，n为点的数量，返回凸包上的点的个数
int converxHull(Point *p, int n, Point *ch){
	sort(p, p + n);
	int m = 0;
	for (int i = 0; i < n; ++i){
		while (m > 1 && dbcmp(det(ch[m - 1] - ch[m - 2], p[i] - ch[m - 2])) <= 0) --m;
		ch[m++] = p[i];
	}
	int k = m;
	for (int i = n - 2; i >= 0; --i){
		while (m > k && dbcmp(det(ch[m - 1] - ch[m - 2], p[i] - ch[m - 2])) <= 0) --m;
		ch[m++] = p[i];
	}

	if (n > 1) --m;
	return m;
}

struct Line{
	Point a, b;
	Line(){}
	Line(Point _a, Point _b) :a(_a), b(_b){}
};

//两点生成一条直线
Line point_make_line(const Point a, const Point b){
	return Line(a, b);
}

//点到线段的距离P---->ST
double dis_point_segment(const Point p, const Point s, const Point t){
	if (dbcmp(dot(p - s, t - s)) < 0) return (p - s).getLength();
	if (dbcmp(dot(p - t, s - t)) < 0) return (p - t).getLength();
	return fabs(det(s - p, t - p) / dist(s, t));
}

//点P在直线ST上的投影，保存在cp中
void projection_point_line(const Point p, const Point s, const Point t, Point &cp){
	double r = dot((t - s), (p - s)) / dot(t - s, t - s);
	cp = s + r*(t - s);
}

//点P是否在线段ST上
bool is_point_on_segment(const Point p, const Point s, const Point t){
	return dbcmp(det(p - s, t - s)) == 0 && dbcmp(dot(p - s, p - t)) <= 0;
}

//两条直线是否平行，重合也算作平行，重合返回-1，平行返回0，相交返回1
int parallel(Line a, Line b){
	int x = dbcmp(det(a.a - a.b, b.a - b.b));
	if (x) return 1;
	x = dbcmp(det(a.a - b.a, a.a - b.b));
	if (x == 0) return -1;
	return 0;
}

//两条直线的交点，调用前保证相交
void line_make_point(Line a, Line b, Point &res){
	double s1 = det(a.a - b.a, b.b - b.a);
	double s2 = det(a.b - b.a, b.b - b.a);
	res = (s1*a.b - s2*a.a) / (s1 - s2);
}

//两条线段的交点,返回1表示规范相交，0不相交，-1部分重合, 未考虑只有端点重合的情况
int segment_make_point(Line a, Line b, Point &res){
	int c1, c2, c3, c4;
	c1 = dbcmp(det(a.a - b.a, b.b - b.a));
	c2 = dbcmp(det(a.b - b.a, b.b - b.a));
	c3 = dbcmp(det(b.a - a.a, a.b - a.a));
	c4 = dbcmp(det(b.b - a.a, a.b - a.a));
	if (c1*c2 < 0 && c3*c4 < 0){//规范相交
		line_make_point(a, b, res);
		return 1;
	}
	int state;
	if ((state = parallel(a, b)) == -1){//部分重合
		if (is_point_on_segment(a.a, b.a, b.b) || is_point_on_segment(a.b, b.a, b.b))
			return -1;
	}
	if (state == 1){
		bool flag = 0;
		if (is_point_on_segment(a.a, b.a, b.b)) res = a.a, flag = 1;
		else if (is_point_on_segment(a.b, b.a, b.b)) res = a.b, flag = 1;
		else if (is_point_on_segment(b.a, a.a, a.b)) res = b.a, flag = 1;
		else if (is_point_on_segment(b.b, a.a, a.b)) res = b.b, flag = 1;
		if (flag) return 1;
	}
	return 0;
}

//直线平移距离len
Line move_d(Line a, const double &len){
	Point d = a.b - a.a;
	d = d / d.getLength();
	d = rotate_point(d, pi / 2);
	return Line(a.a + d*len, a.b + d*len);
}

//点p是否在多边形poly中，-1表示在边界上，0---外部，1---内部
int is_point_in_polygon(Point p, Point *poly, int n){
	int w = 0;
	for (int i = 0; i < n; ++i){
		if (is_point_on_segment(p, poly[i], poly[(i + 1) % n])) return -1;
		int d1 = dbcmp(poly[i].y - p.y);
		int d2 = dbcmp(poly[(i + 1) % n].y - p.y);
		int k = dbcmp(det(poly[(i + 1) % n] - poly[i], p - poly[i]));
		if (k>0 && d1 <= 0 && d2 > 0) ++w;
		if (k < 0 && d1>0 && d2 <= 0) --w;
	}
	if (w != 0) return 1;
	return 0;
}

double convex_diameter(Point *p, int n, int &First, int &Second){
	double maxd = 0;
	if (n == 1){
		First = Second = 0;
		return maxd;
	}
	#define next(i) ((i+1)%n)
	for (int i = 0, j = 1; i < n; ++i){
		while (dbcmp(det(p[next(i)] - p[i], p[j] - p[i]) - det(p[next(i)] - p[i], p[next(j)] - p[i])) < 0){
			j = next(j);
		}
		double d = dist(p[i], p[j]);
		if (d > maxd){
			maxd = d;
			First = i; Second = j;
		}
		d = dist(p[next(i)], p[next(j)]);
		if (d > maxd){
			maxd = d;
			First = next(i);
			Second = next(j);
		}
	}
	return maxd;
}

//返回凸包的最小矩形覆盖
double min_rectangle_cover(Point *p, int n){
	if (n < 3) return 0;
	p[n] = p[0];
	double ans = 1e50;
	int l, r, o;
	o = 1;
	r = 1;
	for (int i = 0; i < n; ++i){
		//卡出距离P[i]P[i+1]最远的点
		while (dbcmp(det(p[i + 1] - p[i], p[o + 1] - p[i]) - det(p[i + 1] - p[i], p[o] - p[i])) >= 0)
			o = (o + 1) % n;
		//卡出最右边的点
		while (dbcmp(dot(p[i + 1] - p[i], p[r + 1] - p[i]) - dot(p[i + 1] - p[i], p[r] - p[i])) >= 0)
			r = (r + 1) % n;
		if (i == 0) l = r;

		while (dbcmp(dot(p[i + 1] - p[i], p[l + 1] - p[i]) - dot(p[i + 1] - p[i], p[l] - p[i])) <= 0)
			l = (l + 1) % n;
		double d = dist(p[i], p[i + 1]);
		
		double H = det(p[i + 1] - p[i], p[o] - p[i]) / d;
		double L = dot(p[i + 1] - p[i], p[r] - p[i]) / d - dot(p[i + 1] - p[i], p[l] - p[i]) / d;
		ans = min(ans, fabs(L*H));
	}
	return ans;
}

const int maxn = 1005;

Point ps[maxn];
Point tb[maxn];
int n, nn;



int main(){
	while (scanf("%d", &n) == 1 && n){
		for (int i = 0; i < n; ++i) ps[i].input();
		nn = converxHull(ps, n, tb);
		printf("%.4lf\n", min_rectangle_cover(tb, nn));
	}
	return 0;
}